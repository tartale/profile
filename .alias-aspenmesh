#!/bin/bash

alias als='aws s3 ls s3://aspenmesh-release'
alias awsh='echo $(kubectl -n istio-system get svc istio-ingressgateway -o=jsonpath="{.status.loadBalancer.ingress[0].hostname}")'
alias bookinfo-sample.sh='bookinfo-sample.sh $(basename $PWD)'
alias bookinfo-traffic.sh='bookinfo-traffic.sh $(basename $PWD)'
alias cdc='cd /Users/artale/aspenmesh/clusters'
alias cdd='cd /Users/artale/aspenmesh/downloads'
alias cdgo='cd /Users/artale/aspenmesh/go/src'
alias cdgoa='cd /Users/artale/aspenmesh/go/src/github.com/aspenmesh'
alias cdgoap='cd /Users/artale/aspenmesh/go/src/github.com/aspenmesh/apiserver'
alias cdgot='cd /Users/artale/aspenmesh/go/src/github.com/tartale'
alias cluster-info.sh='cluster-info.sh $(basename $PWD)'
alias ccv='circleci config validate --org-slug gh/aspenmesh'
alias hmt='history | grep "make test" | grep -v history'
alias ht="helm template istio $(recentDownload)/manifests/charts/istio-control/istio-discovery --namespace istio-system"
alias install-aspen-mesh.sh='$(issafe) && install-aspen-mesh.sh $(basename $PWD)'
alias install-secrets.sh='install-secrets.sh $(basename $PWD)'
alias initialize-openshift-namespace.sh='initialize-openshift-namespace.sh $(basename $PWD)'
alias it='RUN_INT_TESTS="true" GINKGO_PKGS="test/int/eventmanager" make test'
alias ktncp='(while true; do k delete ns ktunnel ; k create ns ktunnel; ktunnel -v expose controlplane-local -n ktunnel 18001:18001; k delete ns ktunnel; done)'
alias oh='kubectl apply -f https://git.io/JJ6dY'
alias remove-aspen-mesh.sh='$(issafe) && remove-aspen-mesh.sh $(basename $PWD)'
alias sg='npm run build-types /Users/artale/aspenmesh/go/src/github.com/aspenmesh/apiserver/pkg/generated/api/public/controlplane/v1/service.swagger.json controlplane'
alias upgrade-aspen-mesh.sh='upgrade-aspen-mesh.sh $(basename $PWD)'
alias ut='RUN_INT_TESTS="false" GINKGO_PKGS="pkg/eventmanager" make test'
