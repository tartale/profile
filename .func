#!/usr/bin/env bash
# shellcheck disable=SC1083,SC1090,SC2044,SC2086,SC2155,SC2164

function aar() {
  local roleArn="${1}"; shift
  local args="$*"
  local out=$(aws sts assume-role --role-arn "${roleArn}" --role-session-name "assumed-role" ${args}) || return 1
  local accessKeyId=$(jq -r '.Credentials.AccessKeyId' <<< "${out}") || return 1
  local secretAccessKey=$(jq -r '.Credentials.SecretAccessKey' <<< "${out}") || return 1
  local sessionToken=$(jq -r '.Credentials.SessionToken' <<< "${out}") || return 1
  local assumedRoleUser=$(jq -r '.AssumedRoleUser' <<< "${out}") || return 1
  export AWS_ACCESS_KEY_ID="${accessKeyId}"
  export AWS_SECRET_ACCESS_KEY="${secretAccessKey}"
  export AWS_SESSION_TOKEN="${sessionToken}"
  echo "${assumedRoleUser}"
}

function alo() {
  local who=$(aws sts get-caller-identity)
  echo "logging out:"
  echo "${who}"
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

function ags() {
  local secretID="${1}"
  aws secretsmanager get-secret-value --secret-id "${secretID}" --output json | jq -r '.SecretString' | jq
}

function brew() (
  local args="$*"
  if [[ "${1}" == "install" || "${1}" == "tap" ]]; then
    $(which brew) ${args} && echo "brew ${args}" >> "${PROFILE}/.brewfile-${PROJECT}"
  else
    $(which brew) ${args}
  fi
)

function cdp() {
  cd "${WORKSPACE}/${1}"
}

function cxArch() {
  local path="${1}"
  local arch="$(uname -s)-$(uname -m)"
  arch=$(echo "${arch}" | tr '[:upper:]' '[:lower:]')
  arch="${arch/x86_64/x64}"
  if [[ -z "${path}" ]]; then
    echo "${arch}"
    return 0
  fi

  case "${path}" in
    *darwin*|*Darwin*)
      arch="darwin"
      ;;
    *linux*|*Linux*)
      arch="linux"
      ;;
  esac
  case "${path}" in
    *arm64*)
      arch="${arch}-arm64"
      ;;
    *x64*)
      arch="${arch}-x64"
      ;;
  esac
  echo "${arch}"
}

function cxArchMatch() {
  local path="${1}"
  local thisArch=$(cxArch)
  local pathArch=$(cxArch "${path}")
  [[ "${thisArch}" == "${pathArch}" ]]
}

function cxDownload() {
  outputDir="${VSCODE_EXTENSION_DIR:-$(pwd)}"

  mkdir -p "${outputDir}"
  IFS=$'\n' read -r -d '' -a extensions < <( code --list-extensions --show-versions )
  
  for e in "${extensions[@]}"; do
    local publisher=$(cut -d '.' -f 1 <<< "${e}")
    local package=$(cut -d '.' -f 2- <<< "${e}" | cut -d '@' -f 1)
    local version=$(cut -d '@' -f 2- <<< "${e}")
    local url="https://${publisher}.gallery.vsassets.io/_apis/public/gallery/publisher/${publisher}/extension/${package}/${version}/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"
    local outputPath="${outputDir}/${publisher}.${package}-${version}.vsix"

    if debug; then
      echo "extension: ${e}; url: ${url}" >&2
    fi
    echo "downloading: ${e} to ${outputPath}"
    local statusCode=$(curlWithStatus --output "${outputPath}" "${url}" | jq -r '.[0].statusCode')
    if [[ "${statusCode}" != "200" ]]; then
      echo "error downloading ${e}; status code: ${statusCode}" >&2
      continue
    fi
    local manifest="$(unzip -p ${outputPath} extension.vsixmanifest)"
    local targetPlatform="$(xq -r '.PackageManifest.Metadata.Identity.["@TargetPlatform"]' <<< ${manifest} )"
    if [[ "${targetPlatform}" == "null" ]]; then
      continue
    fi
    local newOutputPath="${outputPath/.vsix/@${targetPlatform}.vsix}"
    echo "renaming platform-specific extension to ${newOutputPath}"
    mv "${outputPath}" "${newOutputPath}"
    # TODO - add ?targetPlatform= and download more?
  done  
}

function cxInstallByCode() {
  local path="${1}"
  if dryrun; then
    echo "code --verbose --install-extension ${path}" >&2
    return
  fi
  (trap 'echo "aborting install"; exit' SIGINT; code --verbose --install-extension "${path}")
}

function cxInstall() {
  local dir="${1:-$(pwd)}"

  for path in $(find "${dir}" -name '*.vsix'); do
    if [[ "${path}" =~ .*pack.* ]]; then
      echo "skipping install of pack extension: $(basename ${path})" >&2
      continue
    fi
    if cxArchMatch "${path}" ; then
      cxInstallByCode "${path}"
    fi
  done
}

function curlWithStatus() {
  if debug; then
    set -x
  fi
  curl -s --write-out '%{stderr}{"statusCode": %{http_code}}\n' "${@}" 2>&1 | jq -s
  set +x
}
export -f curlWithStatus

function debug() {
  [[ "${DEBUG}" == "true" ]]
}

function decode() {
  echo "${1}" | base64 -d
  echo
}

function dockerclean() {
  docker images -f "dangling=true" -q | xargs docker rmi -f || true
  docker rm -v "$(docker ps -a -q -f status=exited)" || true
  docker volume ls -f 'dangling=true' -q | xargs docker volume rm || true
  docker ps -a | egrep 'Exited.*(days|weeks|months)' | awk '{print $1}' | xargs docker rm -v || true
  docker buildx prune -f || true
  docker system prune -f || true
}

function dryrun() {
  [[ "${DRY_RUN}" == "true" ]]
}

function dts() {
  date +%Y-%m-%dT%H-%M-%S
}

function encode() {
  printf "%s" "${1}" | base64
}

function eg() {
  env | grep -i "${1}"
}

function fd() {
  local cmd="find . -type d"
  local args=()
  for n in "$@"; do
    args+=("-name *${n}*")
  done
  local argString
  argString=$(IFS='|' ; echo "${args[*]}")
  argString="${argString//|/ -o }"
  cmd="$cmd ${argString}"
  eval "${cmd}"
}

function ff() {
  local cmd="find . -type f"
  local args=()
  for n in "$@"; do
    args+=("-name *${n}*")
  done
  local argString
  argString=$(IFS='|' ; echo "${args[*]}")
  argString="${argString//|/ -o }"
  cmd="$cmd ${argString}"
  eval "${cmd}"
}

function ffg() {
  find . -type f -exec grep -l "${1}" {} \;
}

function interface() {
  netstat -rn | grep default | head -1 | awk '{print $6}'
}

function kdap() {
  if [ $# -ne 1 ]; then
    echo "usage: $0 namespace" >&2
    return 1
  fi
  kubectl delete --all pods --namespace=$1
}

function kdaa() {
  if [ $# -ne 1 ]; then
    echo "usage: $0 namespace" >&2
    return 1
  fi
  kubectl delete --all deployments,jobs,services,pods --namespace=$1
}

function hx() {
  cmd="history"
  for g in "${@}"; do
    cmd="${cmd} | grep ${g}"
  done
  eval "${cmd} | cut -c 8-"
}

function myIP() {
  curl http://api.ipify.org 2> /dev/null
  echo
}

function mvlink() {
  if [ -z $1 ] || [ -z $2 ]; then
    echo "usage: $0 sourceLink target"
    return 1
  fi

  if [ ! -L $1 ]; then
    echo "$1: not a symbolic link"
    return 1
  fi

  rm -f $1 && ln -s $2 $1
}

function rmext() {
  path="${1}"
  filename="$(basename ${path})"
  echo "${filename%.*}"
}

function publicIPFor() (
  local interface="${1}"

  if [ -z "${interface}" ]
  then
    >&2 echo "usage: publicIPFor <interface>"
    return 1
  fi

  ip=$(ifconfig "${interface}" | awk '/inet / {print $2}')
  if [ -z "${ip}" ]
  then
    >&2 echo "unable to find public IP for ${interface}"
    return 1
  fi

  echo "${ip}"
  return 0
)

function psag() {
  cmd="ps -ao user,pid,ppid,start,time,command"
  for g in "${@}"; do
    cmd="${cmd} | grep ${g}"
  done
  eval "${cmd}"
}

function psug() {
  cmd="ps auwx | grep ${USER}"
  for g in "${@}"; do
    cmd="${cmd} | grep ${g}"
  done
  eval "${cmd}"
}

function run() (
  # shellcheck disable=SC2294
  if (eval "${@}"); then
    say "done"
  else
    say "error"
  fi
)
export -f run
